//go:build exclude
// +build exclude

// This program generates form.Template, form.Layout, form.Client & form.AlpineJS
package main

import (
	"flag"
	"path/filepath"
	"strings"

	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"text/template"
	"time"
)

func main() {
	var asset string
	flag.StringVar(&asset, "asset", "templates", "alpine|templates")
	flag.Parse()
	fmt.Printf("Updating %s.go\n", asset)
	f, err := os.Create(asset + ".go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	switch asset {
	case "templates":
		packageTemplate.Execute(f, struct {
			Timestamp time.Time
			AlpineJS  string
			Form      string
			Layout    string
			ClientJS  string
		}{
			Timestamp: time.Now(),
			Form:      loadAsset("form.html"),
			Layout:    loadAsset("layout.html"),
			ClientJS:  loadAsset("client.js"),
		})
	case "alpine":
		alpineTemplate.Execute(f, struct {
			AlpineJS string
		}{
			AlpineJS: loadAlpineJS(),
		})

	}
}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by cmd/assets/main.go
// {{ .Timestamp }}
package form

var FormTemplate = {{ .Form }}

var Layout = {{ .Layout }}

var ClientJS = {{ .ClientJS }}
`))

var alpineTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
// This file was generated by cmd/assets/main.go
package form

import "strings"

{{ .AlpineJS }}
`))

func loadAsset(fname string) string {
	b, err := ioutil.ReadFile(filepath.Join("..", "cmd", "assets", fname))
	if err != nil {
		panic(err)
	}
	return fmt.Sprintf("`%s`", b)
}

func loadAlpineJS() string {
	url := "https://unpkg.com/alpinejs@3.10.2/dist/cdn.min.js"
	resp, err := http.Get(url)
	if err != nil {
		panic(err)
	}
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err)
	}
	defer resp.Body.Close()
	src := string(body)
	if strings.Contains(src, "~") {
		panic("~ is used in alpine, can't used for `")
	}
	src = strings.Replace(src, "`", "~", -1)
	src = "var AlpineJS = strings.Replace(`" + src + "`, \"~\", \"`\", -1)"
	return src
}
